'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5448
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("LA_ToolDataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class LA_ToolDataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableget_SC_Report As get_SC_ReportDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("get_SC_Report")) Is Nothing) Then
                MyBase.Tables.Add(New get_SC_ReportDataTable(ds.Tables("get_SC_Report")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property get_SC_Report() As get_SC_ReportDataTable
        Get
            Return Me.tableget_SC_Report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As LA_ToolDataSet1 = CType(MyBase.Clone,LA_ToolDataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("get_SC_Report")) Is Nothing) Then
                MyBase.Tables.Add(New get_SC_ReportDataTable(ds.Tables("get_SC_Report")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableget_SC_Report = CType(MyBase.Tables("get_SC_Report"),get_SC_ReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableget_SC_Report) Is Nothing) Then
                Me.tableget_SC_Report.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "LA_ToolDataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/LA_ToolDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableget_SC_Report = New get_SC_ReportDataTable
        MyBase.Tables.Add(Me.tableget_SC_Report)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeget_SC_Report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As LA_ToolDataSet1 = New LA_ToolDataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub get_SC_ReportRowChangeEventHandler(ByVal sender As Object, ByVal e As get_SC_ReportRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class get_SC_ReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of get_SC_ReportRow)
        
        Private columnDoc_Number As Global.System.Data.DataColumn
        
        Private columnItem_Number As Global.System.Data.DataColumn
        
        Private columnMat_Group As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        Private columnShort_Text As Global.System.Data.DataColumn
        
        Private columnVendor As Global.System.Data.DataColumn
        
        Private columnVendor_Name As Global.System.Data.DataColumn
        
        Private columnCompany_Code As Global.System.Data.DataColumn
        
        Private columnPurch_Org As Global.System.Data.DataColumn
        
        Private columnPurch_Grp As Global.System.Data.DataColumn
        
        Private columnPlant As Global.System.Data.DataColumn
        
        Private columnDoc_Date As Global.System.Data.DataColumn
        
        Private columnCreated_By As Global.System.Data.DataColumn
        
        Private columnDoc_Type As Global.System.Data.DataColumn
        
        Private columnTracking_Field As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnDel_Indicator As Global.System.Data.DataColumn
        
        Private columnDelivery_Comp As Global.System.Data.DataColumn
        
        Private columnFinal_Invoice As Global.System.Data.DataColumn
        
        Private columnRequisitioner As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnRepair As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnConfirm As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnSAPBox As Global.System.Data.DataColumn
        
        Private columnCurrecy_Exchange As Global.System.Data.DataColumn
        
        Private columnLine_Value As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        Private columnDescription_______ As Global.System.Data.DataColumn
        
        Private columnPlant_Country As Global.System.Data.DataColumn
        
        Private columnSpend As Global.System.Data.DataColumn
        
        Private columnVendor_Country As Global.System.Data.DataColumn
        
        Private columnPlant_Name As Global.System.Data.DataColumn
        
        Private columnRange As Global.System.Data.DataColumn
        
        Private columnPO_Type As Global.System.Data.DataColumn
        
        Private columnAuto As Global.System.Data.DataColumn
        
        Private columnMMR_Automation As Global.System.Data.DataColumn
        
        Private columnPrinted As Global.System.Data.DataColumn
        
        Private columnIDNLF As Global.System.Data.DataColumn
        
        Private columnFFT_Type As Global.System.Data.DataColumn
        
        Private columnFFT_Description As Global.System.Data.DataColumn
        
        Private columnGS_Value As Global.System.Data.DataColumn
        
        Private columnReq_Release As Global.System.Data.DataColumn
        
        Private columnRecToPo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "get_SC_Report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Doc_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoc_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mat_GroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMat_Group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Short_TextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShort_Text
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vendor_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendor_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Company_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Purch_OrgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurch_Org
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Purch_GrpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurch_Grp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Doc_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoc_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Created_ByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreated_By
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Doc_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoc_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tracking_FieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTracking_Field
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Del_IndicatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDel_Indicator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delivery_CompColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelivery_Comp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Final_InvoiceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal_Invoice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequisitionerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequisitioner
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepairColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepair
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAPBoxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAPBox
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Currecy_ExchangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrecy_Exchange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Line_ValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLine_Value
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Description_______Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription_______
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plant_CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlant_Country
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpendColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpend
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vendor_CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendor_Country
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plant_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlant_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MMR_AutomationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMMR_Automation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDNLFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDNLF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FFT_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFFT_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FFT_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFFT_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GS_ValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGS_Value
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Req_ReleaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReq_Release
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecToPoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecToPo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As get_SC_ReportRow
            Get
                Return CType(Me.Rows(index),get_SC_ReportRow)
            End Get
        End Property
        
        Public Event get_SC_ReportRowChanging As get_SC_ReportRowChangeEventHandler
        
        Public Event get_SC_ReportRowChanged As get_SC_ReportRowChangeEventHandler
        
        Public Event get_SC_ReportRowDeleting As get_SC_ReportRowChangeEventHandler
        
        Public Event get_SC_ReportRowDeleted As get_SC_ReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addget_SC_ReportRow(ByVal row As get_SC_ReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addget_SC_ReportRow( _
                    ByVal Doc_Number As Double,  _
                    ByVal Item_Number As Double,  _
                    ByVal Mat_Group As String,  _
                    ByVal Material As String,  _
                    ByVal Short_Text As String,  _
                    ByVal Vendor As String,  _
                    ByVal Vendor_Name As String,  _
                    ByVal Company_Code As String,  _
                    ByVal Purch_Org As String,  _
                    ByVal Purch_Grp As String,  _
                    ByVal Plant As String,  _
                    ByVal Doc_Date As String,  _
                    ByVal Created_By As String,  _
                    ByVal Doc_Type As String,  _
                    ByVal Tracking_Field As String,  _
                    ByVal Quantity As Double,  _
                    ByVal UOM As String,  _
                    ByVal Currency As String,  _
                    ByVal Del_Indicator As String,  _
                    ByVal Delivery_Comp As String,  _
                    ByVal Final_Invoice As String,  _
                    ByVal Requisitioner As String,  _
                    ByVal Price As String,  _
                    ByVal Repair As Boolean,  _
                    ByVal Status As String,  _
                    ByVal Confirm As String,  _
                    ByVal Usuario As String,  _
                    ByVal SAPBox As String,  _
                    ByVal Currecy_Exchange As Double,  _
                    ByVal Line_Value As Double,  _
                    ByVal _Region As String,  _
                    ByVal Description_______ As String,  _
                    ByVal Plant_Country As String,  _
                    ByVal Spend As String,  _
                    ByVal Vendor_Country As String,  _
                    ByVal Plant_Name As String,  _
                    ByVal Range As String,  _
                    ByVal PO_Type As String,  _
                    ByVal _Auto As String,  _
                    ByVal MMR_Automation As String,  _
                    ByVal Printed As Boolean,  _
                    ByVal IDNLF As String,  _
                    ByVal FFT_Type As String,  _
                    ByVal FFT_Description As String,  _
                    ByVal GS_Value As String,  _
                    ByVal Req_Release As Date,  _
                    ByVal RecToPo As Double) As get_SC_ReportRow
            Dim rowget_SC_ReportRow As get_SC_ReportRow = CType(Me.NewRow,get_SC_ReportRow)
            Dim columnValuesArray() As Object = New Object() {Doc_Number, Item_Number, Mat_Group, Material, Short_Text, Vendor, Vendor_Name, Company_Code, Purch_Org, Purch_Grp, Plant, Doc_Date, Created_By, Doc_Type, Tracking_Field, Quantity, UOM, Currency, Del_Indicator, Delivery_Comp, Final_Invoice, Requisitioner, Price, Repair, Status, Confirm, Usuario, SAPBox, Currecy_Exchange, Line_Value, _Region, Description_______, Plant_Country, Spend, Vendor_Country, Plant_Name, Range, PO_Type, _Auto, MMR_Automation, Printed, IDNLF, FFT_Type, FFT_Description, GS_Value, Req_Release, RecToPo}
            rowget_SC_ReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowget_SC_ReportRow)
            Return rowget_SC_ReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As get_SC_ReportDataTable = CType(MyBase.Clone,get_SC_ReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New get_SC_ReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDoc_Number = MyBase.Columns("Doc Number")
            Me.columnItem_Number = MyBase.Columns("Item Number")
            Me.columnMat_Group = MyBase.Columns("Mat Group")
            Me.columnMaterial = MyBase.Columns("Material")
            Me.columnShort_Text = MyBase.Columns("Short Text")
            Me.columnVendor = MyBase.Columns("Vendor")
            Me.columnVendor_Name = MyBase.Columns("Vendor Name")
            Me.columnCompany_Code = MyBase.Columns("Company Code")
            Me.columnPurch_Org = MyBase.Columns("Purch Org")
            Me.columnPurch_Grp = MyBase.Columns("Purch Grp")
            Me.columnPlant = MyBase.Columns("Plant")
            Me.columnDoc_Date = MyBase.Columns("Doc Date")
            Me.columnCreated_By = MyBase.Columns("Created By")
            Me.columnDoc_Type = MyBase.Columns("Doc Type")
            Me.columnTracking_Field = MyBase.Columns("Tracking Field")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnUOM = MyBase.Columns("UOM")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnDel_Indicator = MyBase.Columns("Del Indicator")
            Me.columnDelivery_Comp = MyBase.Columns("Delivery Comp")
            Me.columnFinal_Invoice = MyBase.Columns("Final Invoice")
            Me.columnRequisitioner = MyBase.Columns("Requisitioner")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnRepair = MyBase.Columns("Repair")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnConfirm = MyBase.Columns("Confirm")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnSAPBox = MyBase.Columns("SAPBox")
            Me.columnCurrecy_Exchange = MyBase.Columns("Currecy Exchange")
            Me.columnLine_Value = MyBase.Columns("Line Value")
            Me.columnRegion = MyBase.Columns("Region")
            Me.columnDescription_______ = MyBase.Columns("Description       ")
            Me.columnPlant_Country = MyBase.Columns("Plant Country")
            Me.columnSpend = MyBase.Columns("Spend")
            Me.columnVendor_Country = MyBase.Columns("Vendor Country")
            Me.columnPlant_Name = MyBase.Columns("Plant Name")
            Me.columnRange = MyBase.Columns("Range")
            Me.columnPO_Type = MyBase.Columns("PO Type")
            Me.columnAuto = MyBase.Columns("Auto")
            Me.columnMMR_Automation = MyBase.Columns("MMR Automation")
            Me.columnPrinted = MyBase.Columns("Printed")
            Me.columnIDNLF = MyBase.Columns("IDNLF")
            Me.columnFFT_Type = MyBase.Columns("FFT Type")
            Me.columnFFT_Description = MyBase.Columns("FFT Description")
            Me.columnGS_Value = MyBase.Columns("GS Value")
            Me.columnReq_Release = MyBase.Columns("Req Release")
            Me.columnRecToPo = MyBase.Columns("RecToPo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDoc_Number = New Global.System.Data.DataColumn("Doc Number", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoc_Number)
            Me.columnItem_Number = New Global.System.Data.DataColumn("Item Number", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Number)
            Me.columnMat_Group = New Global.System.Data.DataColumn("Mat Group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMat_Group)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnShort_Text = New Global.System.Data.DataColumn("Short Text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShort_Text)
            Me.columnVendor = New Global.System.Data.DataColumn("Vendor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendor)
            Me.columnVendor_Name = New Global.System.Data.DataColumn("Vendor Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendor_Name)
            Me.columnCompany_Code = New Global.System.Data.DataColumn("Company Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany_Code)
            Me.columnPurch_Org = New Global.System.Data.DataColumn("Purch Org", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurch_Org)
            Me.columnPurch_Grp = New Global.System.Data.DataColumn("Purch Grp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurch_Grp)
            Me.columnPlant = New Global.System.Data.DataColumn("Plant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlant)
            Me.columnDoc_Date = New Global.System.Data.DataColumn("Doc Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoc_Date)
            Me.columnCreated_By = New Global.System.Data.DataColumn("Created By", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreated_By)
            Me.columnDoc_Type = New Global.System.Data.DataColumn("Doc Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoc_Type)
            Me.columnTracking_Field = New Global.System.Data.DataColumn("Tracking Field", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTracking_Field)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnDel_Indicator = New Global.System.Data.DataColumn("Del Indicator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDel_Indicator)
            Me.columnDelivery_Comp = New Global.System.Data.DataColumn("Delivery Comp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelivery_Comp)
            Me.columnFinal_Invoice = New Global.System.Data.DataColumn("Final Invoice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal_Invoice)
            Me.columnRequisitioner = New Global.System.Data.DataColumn("Requisitioner", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequisitioner)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnRepair = New Global.System.Data.DataColumn("Repair", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepair)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnConfirm = New Global.System.Data.DataColumn("Confirm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirm)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnSAPBox = New Global.System.Data.DataColumn("SAPBox", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAPBox)
            Me.columnCurrecy_Exchange = New Global.System.Data.DataColumn("Currecy Exchange", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrecy_Exchange)
            Me.columnLine_Value = New Global.System.Data.DataColumn("Line Value", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLine_Value)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnDescription_______ = New Global.System.Data.DataColumn("Description       ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription_______)
            Me.columnPlant_Country = New Global.System.Data.DataColumn("Plant Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlant_Country)
            Me.columnSpend = New Global.System.Data.DataColumn("Spend", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpend)
            Me.columnVendor_Country = New Global.System.Data.DataColumn("Vendor Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendor_Country)
            Me.columnPlant_Name = New Global.System.Data.DataColumn("Plant Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlant_Name)
            Me.columnRange = New Global.System.Data.DataColumn("Range", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRange)
            Me.columnPO_Type = New Global.System.Data.DataColumn("PO Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_Type)
            Me.columnAuto = New Global.System.Data.DataColumn("Auto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnAuto.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AutoColumn")
            Me.columnAuto.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAuto")
            Me.columnAuto.ExtendedProperties.Add("Generator_UserColumnName", "Auto")
            MyBase.Columns.Add(Me.columnAuto)
            Me.columnMMR_Automation = New Global.System.Data.DataColumn("MMR Automation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMMR_Automation)
            Me.columnPrinted = New Global.System.Data.DataColumn("Printed", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinted)
            Me.columnIDNLF = New Global.System.Data.DataColumn("IDNLF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDNLF)
            Me.columnFFT_Type = New Global.System.Data.DataColumn("FFT Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFFT_Type)
            Me.columnFFT_Description = New Global.System.Data.DataColumn("FFT Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFFT_Description)
            Me.columnGS_Value = New Global.System.Data.DataColumn("GS Value", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGS_Value)
            Me.columnReq_Release = New Global.System.Data.DataColumn("Req Release", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReq_Release)
            Me.columnRecToPo = New Global.System.Data.DataColumn("RecToPo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecToPo)
            Me.columnDoc_Number.AllowDBNull = false
            Me.columnItem_Number.AllowDBNull = false
            Me.columnMat_Group.MaxLength = 50
            Me.columnMaterial.MaxLength = 50
            Me.columnShort_Text.MaxLength = 250
            Me.columnVendor.MaxLength = 50
            Me.columnVendor_Name.MaxLength = 250
            Me.columnCompany_Code.MaxLength = 50
            Me.columnPurch_Org.MaxLength = 50
            Me.columnPurch_Grp.MaxLength = 50
            Me.columnPlant.MaxLength = 50
            Me.columnDoc_Date.MaxLength = 50
            Me.columnCreated_By.MaxLength = 50
            Me.columnDoc_Type.MaxLength = 50
            Me.columnTracking_Field.MaxLength = 50
            Me.columnUOM.MaxLength = 50
            Me.columnCurrency.MaxLength = 50
            Me.columnDel_Indicator.MaxLength = 50
            Me.columnDelivery_Comp.MaxLength = 50
            Me.columnFinal_Invoice.MaxLength = 50
            Me.columnRequisitioner.MaxLength = 50
            Me.columnPrice.MaxLength = 50
            Me.columnStatus.MaxLength = 50
            Me.columnConfirm.MaxLength = 50
            Me.columnUsuario.AllowDBNull = false
            Me.columnUsuario.MaxLength = 50
            Me.columnSAPBox.AllowDBNull = false
            Me.columnSAPBox.MaxLength = 50
            Me.columnRegion.MaxLength = 255
            Me.columnDescription_______.MaxLength = 255
            Me.columnPlant_Country.MaxLength = 255
            Me.columnSpend.AllowDBNull = false
            Me.columnSpend.MaxLength = 6
            Me.columnVendor_Country.MaxLength = 10
            Me.columnPlant_Name.MaxLength = 255
            Me.columnRange.AllowDBNull = false
            Me.columnRange.MaxLength = 26
            Me.columnPO_Type.AllowDBNull = false
            Me.columnPO_Type.MaxLength = 14
            Me.columnAuto.AllowDBNull = false
            Me.columnAuto.MaxLength = 3
            Me.columnMMR_Automation.AllowDBNull = false
            Me.columnMMR_Automation.MaxLength = 6
            Me.columnIDNLF.MaxLength = 250
            Me.columnFFT_Type.MaxLength = 3
            Me.columnFFT_Description.MaxLength = 13
            Me.columnGS_Value.MaxLength = 50
            Me.columnRecToPo.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newget_SC_ReportRow() As get_SC_ReportRow
            Return CType(Me.NewRow,get_SC_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New get_SC_ReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(get_SC_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.get_SC_ReportRowChangedEvent) Is Nothing) Then
                RaiseEvent get_SC_ReportRowChanged(Me, New get_SC_ReportRowChangeEvent(CType(e.Row,get_SC_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.get_SC_ReportRowChangingEvent) Is Nothing) Then
                RaiseEvent get_SC_ReportRowChanging(Me, New get_SC_ReportRowChangeEvent(CType(e.Row,get_SC_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.get_SC_ReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent get_SC_ReportRowDeleted(Me, New get_SC_ReportRowChangeEvent(CType(e.Row,get_SC_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.get_SC_ReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent get_SC_ReportRowDeleting(Me, New get_SC_ReportRowChangeEvent(CType(e.Row,get_SC_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeget_SC_ReportRow(ByVal row As get_SC_ReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LA_ToolDataSet1 = New LA_ToolDataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "get_SC_ReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class get_SC_ReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableget_SC_Report As get_SC_ReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableget_SC_Report = CType(Me.Table,get_SC_ReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doc_Number() As Double
            Get
                Return CType(Me(Me.tableget_SC_Report.Doc_NumberColumn),Double)
            End Get
            Set
                Me(Me.tableget_SC_Report.Doc_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Number() As Double
            Get
                Return CType(Me(Me.tableget_SC_Report.Item_NumberColumn),Double)
            End Get
            Set
                Me(Me.tableget_SC_Report.Item_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mat_Group() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Mat_GroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mat Group' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Mat_GroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Short_Text() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Short_TextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Short Text' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Short_TextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendor() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.VendorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendor' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.VendorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendor_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Vendor_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendor Name' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Vendor_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Company_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Company_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company Code' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Company_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Purch_Org() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Purch_OrgColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Purch Org' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Purch_OrgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Purch_Grp() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Purch_GrpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Purch Grp' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Purch_GrpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plant() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.PlantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plant' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.PlantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doc_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Doc_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Doc Date' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Doc_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Created_By() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Created_ByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Created By' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Created_ByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doc_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Doc_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Doc Type' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Doc_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tracking_Field() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Tracking_FieldColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tracking Field' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Tracking_FieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Double
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.QuantityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.UOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UOM' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Del_Indicator() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Del_IndicatorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Del Indicator' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Del_IndicatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delivery_Comp() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Delivery_CompColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Delivery Comp' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Delivery_CompColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Final_Invoice() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Final_InvoiceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Final Invoice' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Final_InvoiceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Requisitioner() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.RequisitionerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Requisitioner' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.RequisitionerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.PriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Repair() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.RepairColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Repair' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.RepairColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Confirm() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.ConfirmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Confirm' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.ConfirmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Return CType(Me(Me.tableget_SC_Report.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableget_SC_Report.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAPBox() As String
            Get
                Return CType(Me(Me.tableget_SC_Report.SAPBoxColumn),String)
            End Get
            Set
                Me(Me.tableget_SC_Report.SAPBoxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Currecy_Exchange() As Double
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Currecy_ExchangeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currecy Exchange' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Currecy_ExchangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Line_Value() As Double
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Line_ValueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Line Value' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Line_ValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description_______() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Description_______Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description       ' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Description_______Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plant_Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Plant_CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plant Country' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Plant_CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Spend() As String
            Get
                Return CType(Me(Me.tableget_SC_Report.SpendColumn),String)
            End Get
            Set
                Me(Me.tableget_SC_Report.SpendColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendor_Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Vendor_CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendor Country' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Vendor_CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plant_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Plant_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plant Name' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Plant_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Range() As String
            Get
                Return CType(Me(Me.tableget_SC_Report.RangeColumn),String)
            End Get
            Set
                Me(Me.tableget_SC_Report.RangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_Type() As String
            Get
                Return CType(Me(Me.tableget_SC_Report.PO_TypeColumn),String)
            End Get
            Set
                Me(Me.tableget_SC_Report.PO_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Auto() As String
            Get
                Return CType(Me(Me.tableget_SC_Report.AutoColumn),String)
            End Get
            Set
                Me(Me.tableget_SC_Report.AutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MMR_Automation() As String
            Get
                Return CType(Me(Me.tableget_SC_Report.MMR_AutomationColumn),String)
            End Get
            Set
                Me(Me.tableget_SC_Report.MMR_AutomationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Printed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.PrintedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Printed' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.PrintedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDNLF() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.IDNLFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDNLF' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.IDNLFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FFT_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.FFT_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FFT Type' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.FFT_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FFT_Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.FFT_DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FFT Description' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.FFT_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GS_Value() As String
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.GS_ValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GS Value' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.GS_ValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Req_Release() As Date
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.Req_ReleaseColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Req Release' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.Req_ReleaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecToPo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableget_SC_Report.RecToPoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecToPo' in table 'get_SC_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableget_SC_Report.RecToPoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMat_GroupNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Mat_GroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMat_GroupNull()
            Me(Me.tableget_SC_Report.Mat_GroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableget_SC_Report.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShort_TextNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Short_TextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShort_TextNull()
            Me(Me.tableget_SC_Report.Short_TextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.VendorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorNull()
            Me(Me.tableget_SC_Report.VendorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendor_NameNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Vendor_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendor_NameNull()
            Me(Me.tableget_SC_Report.Vendor_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompany_CodeNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Company_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompany_CodeNull()
            Me(Me.tableget_SC_Report.Company_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurch_OrgNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Purch_OrgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurch_OrgNull()
            Me(Me.tableget_SC_Report.Purch_OrgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurch_GrpNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Purch_GrpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurch_GrpNull()
            Me(Me.tableget_SC_Report.Purch_GrpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlantNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.PlantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlantNull()
            Me(Me.tableget_SC_Report.PlantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDoc_DateNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Doc_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDoc_DateNull()
            Me(Me.tableget_SC_Report.Doc_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreated_ByNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Created_ByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreated_ByNull()
            Me(Me.tableget_SC_Report.Created_ByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDoc_TypeNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Doc_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDoc_TypeNull()
            Me(Me.tableget_SC_Report.Doc_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTracking_FieldNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Tracking_FieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTracking_FieldNull()
            Me(Me.tableget_SC_Report.Tracking_FieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableget_SC_Report.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.UOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUOMNull()
            Me(Me.tableget_SC_Report.UOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyNull()
            Me(Me.tableget_SC_Report.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDel_IndicatorNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Del_IndicatorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDel_IndicatorNull()
            Me(Me.tableget_SC_Report.Del_IndicatorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelivery_CompNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Delivery_CompColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelivery_CompNull()
            Me(Me.tableget_SC_Report.Delivery_CompColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinal_InvoiceNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Final_InvoiceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinal_InvoiceNull()
            Me(Me.tableget_SC_Report.Final_InvoiceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequisitionerNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.RequisitionerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequisitionerNull()
            Me(Me.tableget_SC_Report.RequisitionerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tableget_SC_Report.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepairNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.RepairColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepairNull()
            Me(Me.tableget_SC_Report.RepairColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableget_SC_Report.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.ConfirmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmNull()
            Me(Me.tableget_SC_Report.ConfirmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrecy_ExchangeNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Currecy_ExchangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrecy_ExchangeNull()
            Me(Me.tableget_SC_Report.Currecy_ExchangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLine_ValueNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Line_ValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLine_ValueNull()
            Me(Me.tableget_SC_Report.Line_ValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_RegionNull()
            Me(Me.tableget_SC_Report.RegionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescription_______Null() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Description_______Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescription_______Null()
            Me(Me.tableget_SC_Report.Description_______Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlant_CountryNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Plant_CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlant_CountryNull()
            Me(Me.tableget_SC_Report.Plant_CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendor_CountryNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Vendor_CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendor_CountryNull()
            Me(Me.tableget_SC_Report.Vendor_CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlant_NameNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Plant_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlant_NameNull()
            Me(Me.tableget_SC_Report.Plant_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintedNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.PrintedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintedNull()
            Me(Me.tableget_SC_Report.PrintedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNLFNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.IDNLFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNLFNull()
            Me(Me.tableget_SC_Report.IDNLFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFFT_TypeNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.FFT_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFFT_TypeNull()
            Me(Me.tableget_SC_Report.FFT_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFFT_DescriptionNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.FFT_DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFFT_DescriptionNull()
            Me(Me.tableget_SC_Report.FFT_DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGS_ValueNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.GS_ValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGS_ValueNull()
            Me(Me.tableget_SC_Report.GS_ValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReq_ReleaseNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.Req_ReleaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReq_ReleaseNull()
            Me(Me.tableget_SC_Report.Req_ReleaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecToPoNull() As Boolean
            Return Me.IsNull(Me.tableget_SC_Report.RecToPoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecToPoNull()
            Me(Me.tableget_SC_Report.RecToPoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class get_SC_ReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As get_SC_ReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As get_SC_ReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As get_SC_ReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace LA_ToolDataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class get_SC_ReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "get_SC_Report"
            tableMapping.ColumnMappings.Add("Doc Number", "Doc Number")
            tableMapping.ColumnMappings.Add("Item Number", "Item Number")
            tableMapping.ColumnMappings.Add("Mat Group", "Mat Group")
            tableMapping.ColumnMappings.Add("Material", "Material")
            tableMapping.ColumnMappings.Add("Short Text", "Short Text")
            tableMapping.ColumnMappings.Add("Vendor", "Vendor")
            tableMapping.ColumnMappings.Add("Vendor Name", "Vendor Name")
            tableMapping.ColumnMappings.Add("Company Code", "Company Code")
            tableMapping.ColumnMappings.Add("Purch Org", "Purch Org")
            tableMapping.ColumnMappings.Add("Purch Grp", "Purch Grp")
            tableMapping.ColumnMappings.Add("Plant", "Plant")
            tableMapping.ColumnMappings.Add("Doc Date", "Doc Date")
            tableMapping.ColumnMappings.Add("Created By", "Created By")
            tableMapping.ColumnMappings.Add("Doc Type", "Doc Type")
            tableMapping.ColumnMappings.Add("Tracking Field", "Tracking Field")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("UOM", "UOM")
            tableMapping.ColumnMappings.Add("Currency", "Currency")
            tableMapping.ColumnMappings.Add("Del Indicator", "Del Indicator")
            tableMapping.ColumnMappings.Add("Delivery Comp", "Delivery Comp")
            tableMapping.ColumnMappings.Add("Final Invoice", "Final Invoice")
            tableMapping.ColumnMappings.Add("Requisitioner", "Requisitioner")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("Repair", "Repair")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Confirm", "Confirm")
            tableMapping.ColumnMappings.Add("Usuario", "Usuario")
            tableMapping.ColumnMappings.Add("SAPBox", "SAPBox")
            tableMapping.ColumnMappings.Add("Currecy Exchange", "Currecy Exchange")
            tableMapping.ColumnMappings.Add("Line Value", "Line Value")
            tableMapping.ColumnMappings.Add("Region", "Region")
            tableMapping.ColumnMappings.Add("Description       ", "Description       ")
            tableMapping.ColumnMappings.Add("Plant Country", "Plant Country")
            tableMapping.ColumnMappings.Add("Spend", "Spend")
            tableMapping.ColumnMappings.Add("Vendor Country", "Vendor Country")
            tableMapping.ColumnMappings.Add("Plant Name", "Plant Name")
            tableMapping.ColumnMappings.Add("Range", "Range")
            tableMapping.ColumnMappings.Add("PO Type", "PO Type")
            tableMapping.ColumnMappings.Add("Auto", "Auto")
            tableMapping.ColumnMappings.Add("MMR Automation", "MMR Automation")
            tableMapping.ColumnMappings.Add("Printed", "Printed")
            tableMapping.ColumnMappings.Add("IDNLF", "IDNLF")
            tableMapping.ColumnMappings.Add("FFT Type", "FFT Type")
            tableMapping.ColumnMappings.Add("FFT Description", "FFT Description")
            tableMapping.ColumnMappings.Add("GS Value", "GS Value")
            tableMapping.ColumnMappings.Add("Req Release", "Req Release")
            tableMapping.ColumnMappings.Add("RecToPo", "RecToPo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.OA_Tool.My.MySettings.Default.LA_ToolConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Doc Number], [Item Number], [Mat Group], Material, [Short Text], Vendor, "& _ 
                "[Vendor Name], [Company Code], [Purch Org], [Purch Grp], Plant, [Doc Date], [Cre"& _ 
                "ated By], [Doc Type], [Tracking Field], Quantity, UOM, Currency, [Del Indicator]"& _ 
                ", [Delivery Comp], [Final Invoice], Requisitioner, Price, Repair, Status, [Confi"& _ 
                "rm], Usuario, SAPBox, [Currecy Exchange], [Line Value], Region, [Description    "& _ 
                "   ], [Plant Country], Spend, [Vendor Country], [Plant Name], Range, [PO Type], "& _ 
                "Auto, [MMR Automation], Printed, IDNLF, [FFT Type], [FFT Description], [GS Value"& _ 
                "], [Req Release], RecToPo FROM dbo.get_SC_Report(@TNumber)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TNumber", Global.System.Data.SqlDbType.NVarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LA_ToolDataSet1.get_SC_ReportDataTable, ByVal TNumber As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TNumber")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TNumber,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal TNumber As String) As LA_ToolDataSet1.get_SC_ReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TNumber")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TNumber,String)
            End If
            Dim dataTable As LA_ToolDataSet1.get_SC_ReportDataTable = New LA_ToolDataSet1.get_SC_ReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As LA_ToolDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As LA_ToolDataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As LA_ToolDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As LA_ToolDataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
